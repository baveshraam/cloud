// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  clerkUserId        String    @unique // Clerk's user ID
  email              String    @unique
  name               String?
  imageUrl           String?
  role               UserRole  @default(UNASSIGNED) // UNASSIGNED, PATIENT, DOCTOR, ADMIN
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  credits            Int       @default(0)
  specialty          String?
  experience         Int?
  credentialUrl      String?
  description        String?   @db.Text
  verificationStatus VerificationStatus? @default(PENDING)
  patientAppointments Appointment[]       @relation("PatientAppointments")
  doctorAppointments  Appointment[]       @relation("DoctorAppointments")
  availabilities      Availability[]
  transactions        CreditTransaction[]
  payouts             Payout[]
}

enum UserRole {
  UNASSIGNED
  PATIENT
  DOCTOR
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Availability {
  id        String  @id @default(uuid())
  doctorId  String
  doctor    User    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime String
  endTime   String
  status    SlotStatus @default(AVAILABLE)
  @@index([doctorId])
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

model Appointment {
  id                 String   @id @default(uuid())
  patientId          String
  patient            User     @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId           String
  doctor             User     @relation("DoctorAppointments", fields: [doctorId], references: [id])
  startTime          DateTime
  endTime            DateTime
  status             AppointmentStatus @default(SCHEDULED)
  notes              String?  @db.Text
  patientDescription String?  @db.Text
  videoSessionId     String?
  videoSessionToken  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  @@index([status, startTime])
  @@index([doctorId, startTime])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model CreditTransaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Int
  type      TransactionType
  packageId String?
  createdAt DateTime @default(now())
}

// --- THIS IS THE IMPORTANT CHANGE ---
// Ensure INITIAL_CREDITS is included in this list
enum TransactionType {
  CREDIT_PURCHASE
  APPOINTMENT_DEDUCTION
  ADMIN_ADJUSTMENT
  INITIAL_CREDITS
}

model Payout {
  id            String       @id @default(uuid())
  doctorId      String
  doctor        User         @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  amount        Float
  credits       Int
  platformFee   Float
  netAmount     Float
  paypalEmail   String
  status        PayoutStatus @default(PROCESSING)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  processedAt   DateTime?
  processedBy   String?
  @@index([status, createdAt])
  @@index([doctorId, status])
}

enum PayoutStatus {
  PROCESSING
  PROCESSED
}
